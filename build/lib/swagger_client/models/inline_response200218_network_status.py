# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200218NetworkStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuit_status': 'InlineResponse200218NetworkStatusCircuitStatus',
        'core_status': 'InlineResponse200218NetworkStatusCircuitStatus',
        'edges_status': 'InlineResponse200218NetworkStatusCircuitStatus',
        'lan_status': 'InlineResponse200218NetworkStatusCircuitStatus',
        'site_status': 'InlineResponse200218NetworkStatusCircuitStatus'
    }

    attribute_map = {
        'circuit_status': 'circuitStatus',
        'core_status': 'coreStatus',
        'edges_status': 'edgesStatus',
        'lan_status': 'lanStatus',
        'site_status': 'siteStatus'
    }

    def __init__(self, circuit_status=None, core_status=None, edges_status=None, lan_status=None, site_status=None):  # noqa: E501
        """InlineResponse200218NetworkStatus - a model defined in Swagger"""  # noqa: E501
        self._circuit_status = None
        self._core_status = None
        self._edges_status = None
        self._lan_status = None
        self._site_status = None
        self.discriminator = None
        if circuit_status is not None:
            self.circuit_status = circuit_status
        if core_status is not None:
            self.core_status = core_status
        if edges_status is not None:
            self.edges_status = edges_status
        if lan_status is not None:
            self.lan_status = lan_status
        if site_status is not None:
            self.site_status = site_status

    @property
    def circuit_status(self):
        """Gets the circuit_status of this InlineResponse200218NetworkStatus.  # noqa: E501


        :return: The circuit_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :rtype: InlineResponse200218NetworkStatusCircuitStatus
        """
        return self._circuit_status

    @circuit_status.setter
    def circuit_status(self, circuit_status):
        """Sets the circuit_status of this InlineResponse200218NetworkStatus.


        :param circuit_status: The circuit_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :type: InlineResponse200218NetworkStatusCircuitStatus
        """

        self._circuit_status = circuit_status

    @property
    def core_status(self):
        """Gets the core_status of this InlineResponse200218NetworkStatus.  # noqa: E501


        :return: The core_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :rtype: InlineResponse200218NetworkStatusCircuitStatus
        """
        return self._core_status

    @core_status.setter
    def core_status(self, core_status):
        """Sets the core_status of this InlineResponse200218NetworkStatus.


        :param core_status: The core_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :type: InlineResponse200218NetworkStatusCircuitStatus
        """

        self._core_status = core_status

    @property
    def edges_status(self):
        """Gets the edges_status of this InlineResponse200218NetworkStatus.  # noqa: E501


        :return: The edges_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :rtype: InlineResponse200218NetworkStatusCircuitStatus
        """
        return self._edges_status

    @edges_status.setter
    def edges_status(self, edges_status):
        """Sets the edges_status of this InlineResponse200218NetworkStatus.


        :param edges_status: The edges_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :type: InlineResponse200218NetworkStatusCircuitStatus
        """

        self._edges_status = edges_status

    @property
    def lan_status(self):
        """Gets the lan_status of this InlineResponse200218NetworkStatus.  # noqa: E501


        :return: The lan_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :rtype: InlineResponse200218NetworkStatusCircuitStatus
        """
        return self._lan_status

    @lan_status.setter
    def lan_status(self, lan_status):
        """Sets the lan_status of this InlineResponse200218NetworkStatus.


        :param lan_status: The lan_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :type: InlineResponse200218NetworkStatusCircuitStatus
        """

        self._lan_status = lan_status

    @property
    def site_status(self):
        """Gets the site_status of this InlineResponse200218NetworkStatus.  # noqa: E501


        :return: The site_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :rtype: InlineResponse200218NetworkStatusCircuitStatus
        """
        return self._site_status

    @site_status.setter
    def site_status(self, site_status):
        """Sets the site_status of this InlineResponse200218NetworkStatus.


        :param site_status: The site_status of this InlineResponse200218NetworkStatus.  # noqa: E501
        :type: InlineResponse200218NetworkStatusCircuitStatus
        """

        self._site_status = site_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200218NetworkStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200218NetworkStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
