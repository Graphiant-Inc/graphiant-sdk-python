# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20032BucketDetailsAppNameRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_hosts': 'str',
        'affected_regions': 'str',
        'affected_sites': 'str',
        'affected_vrfs': 'str',
        'app_id_records': 'list[InlineResponse20032BucketDetailsAppIdRecords]',
        'app_name': 'str',
        'category': 'str',
        'flows_analyzed': 'str',
        'recommendation': 'str',
        'risk_status': 'str',
        'threat_score': 'str'
    }

    attribute_map = {
        'affected_hosts': 'affectedHosts',
        'affected_regions': 'affectedRegions',
        'affected_sites': 'affectedSites',
        'affected_vrfs': 'affectedVrfs',
        'app_id_records': 'appIdRecords',
        'app_name': 'appName',
        'category': 'category',
        'flows_analyzed': 'flowsAnalyzed',
        'recommendation': 'recommendation',
        'risk_status': 'riskStatus',
        'threat_score': 'threatScore'
    }

    def __init__(self, affected_hosts=None, affected_regions=None, affected_sites=None, affected_vrfs=None, app_id_records=None, app_name=None, category=None, flows_analyzed=None, recommendation=None, risk_status=None, threat_score=None):  # noqa: E501
        """InlineResponse20032BucketDetailsAppNameRecords - a model defined in Swagger"""  # noqa: E501
        self._affected_hosts = None
        self._affected_regions = None
        self._affected_sites = None
        self._affected_vrfs = None
        self._app_id_records = None
        self._app_name = None
        self._category = None
        self._flows_analyzed = None
        self._recommendation = None
        self._risk_status = None
        self._threat_score = None
        self.discriminator = None
        if affected_hosts is not None:
            self.affected_hosts = affected_hosts
        if affected_regions is not None:
            self.affected_regions = affected_regions
        if affected_sites is not None:
            self.affected_sites = affected_sites
        if affected_vrfs is not None:
            self.affected_vrfs = affected_vrfs
        if app_id_records is not None:
            self.app_id_records = app_id_records
        if app_name is not None:
            self.app_name = app_name
        if category is not None:
            self.category = category
        if flows_analyzed is not None:
            self.flows_analyzed = flows_analyzed
        if recommendation is not None:
            self.recommendation = recommendation
        if risk_status is not None:
            self.risk_status = risk_status
        if threat_score is not None:
            self.threat_score = threat_score

    @property
    def affected_hosts(self):
        """Gets the affected_hosts of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The affected_hosts of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._affected_hosts

    @affected_hosts.setter
    def affected_hosts(self, affected_hosts):
        """Sets the affected_hosts of this InlineResponse20032BucketDetailsAppNameRecords.


        :param affected_hosts: The affected_hosts of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._affected_hosts = affected_hosts

    @property
    def affected_regions(self):
        """Gets the affected_regions of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The affected_regions of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._affected_regions

    @affected_regions.setter
    def affected_regions(self, affected_regions):
        """Sets the affected_regions of this InlineResponse20032BucketDetailsAppNameRecords.


        :param affected_regions: The affected_regions of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._affected_regions = affected_regions

    @property
    def affected_sites(self):
        """Gets the affected_sites of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The affected_sites of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._affected_sites

    @affected_sites.setter
    def affected_sites(self, affected_sites):
        """Sets the affected_sites of this InlineResponse20032BucketDetailsAppNameRecords.


        :param affected_sites: The affected_sites of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._affected_sites = affected_sites

    @property
    def affected_vrfs(self):
        """Gets the affected_vrfs of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The affected_vrfs of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._affected_vrfs

    @affected_vrfs.setter
    def affected_vrfs(self, affected_vrfs):
        """Sets the affected_vrfs of this InlineResponse20032BucketDetailsAppNameRecords.


        :param affected_vrfs: The affected_vrfs of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._affected_vrfs = affected_vrfs

    @property
    def app_id_records(self):
        """Gets the app_id_records of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The app_id_records of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: list[InlineResponse20032BucketDetailsAppIdRecords]
        """
        return self._app_id_records

    @app_id_records.setter
    def app_id_records(self, app_id_records):
        """Sets the app_id_records of this InlineResponse20032BucketDetailsAppNameRecords.


        :param app_id_records: The app_id_records of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: list[InlineResponse20032BucketDetailsAppIdRecords]
        """

        self._app_id_records = app_id_records

    @property
    def app_name(self):
        """Gets the app_name of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The app_name of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this InlineResponse20032BucketDetailsAppNameRecords.


        :param app_name: The app_name of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def category(self):
        """Gets the category of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The category of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse20032BucketDetailsAppNameRecords.


        :param category: The category of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def flows_analyzed(self):
        """Gets the flows_analyzed of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The flows_analyzed of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._flows_analyzed

    @flows_analyzed.setter
    def flows_analyzed(self, flows_analyzed):
        """Sets the flows_analyzed of this InlineResponse20032BucketDetailsAppNameRecords.


        :param flows_analyzed: The flows_analyzed of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._flows_analyzed = flows_analyzed

    @property
    def recommendation(self):
        """Gets the recommendation of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The recommendation of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this InlineResponse20032BucketDetailsAppNameRecords.


        :param recommendation: The recommendation of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._recommendation = recommendation

    @property
    def risk_status(self):
        """Gets the risk_status of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The risk_status of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._risk_status

    @risk_status.setter
    def risk_status(self, risk_status):
        """Sets the risk_status of this InlineResponse20032BucketDetailsAppNameRecords.


        :param risk_status: The risk_status of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._risk_status = risk_status

    @property
    def threat_score(self):
        """Gets the threat_score of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501


        :return: The threat_score of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :rtype: str
        """
        return self._threat_score

    @threat_score.setter
    def threat_score(self, threat_score):
        """Sets the threat_score of this InlineResponse20032BucketDetailsAppNameRecords.


        :param threat_score: The threat_score of this InlineResponse20032BucketDetailsAppNameRecords.  # noqa: E501
        :type: str
        """

        self._threat_score = threat_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20032BucketDetailsAppNameRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20032BucketDetailsAppNameRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
