# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1diagnosticpingpauseresumeParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_address': 'str',
        'hop_stats_count': 'str',
        'interface': 'str',
        'payload_size': 'str',
        'port': 'str',
        'probe_count': 'str',
        'src_address': 'str',
        'tos': 'str',
        'vrf_name': 'str'
    }

    attribute_map = {
        'dest_address': 'destAddress',
        'hop_stats_count': 'hopStatsCount',
        'interface': 'interface',
        'payload_size': 'payloadSize',
        'port': 'port',
        'probe_count': 'probeCount',
        'src_address': 'srcAddress',
        'tos': 'tos',
        'vrf_name': 'vrfName'
    }

    def __init__(self, dest_address=None, hop_stats_count=None, interface=None, payload_size=None, port=None, probe_count=None, src_address=None, tos=None, vrf_name=None):  # noqa: E501
        """V1diagnosticpingpauseresumeParams - a model defined in Swagger"""  # noqa: E501
        self._dest_address = None
        self._hop_stats_count = None
        self._interface = None
        self._payload_size = None
        self._port = None
        self._probe_count = None
        self._src_address = None
        self._tos = None
        self._vrf_name = None
        self.discriminator = None
        if dest_address is not None:
            self.dest_address = dest_address
        if hop_stats_count is not None:
            self.hop_stats_count = hop_stats_count
        if interface is not None:
            self.interface = interface
        if payload_size is not None:
            self.payload_size = payload_size
        if port is not None:
            self.port = port
        if probe_count is not None:
            self.probe_count = probe_count
        if src_address is not None:
            self.src_address = src_address
        if tos is not None:
            self.tos = tos
        if vrf_name is not None:
            self.vrf_name = vrf_name

    @property
    def dest_address(self):
        """Gets the dest_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The dest_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._dest_address

    @dest_address.setter
    def dest_address(self, dest_address):
        """Sets the dest_address of this V1diagnosticpingpauseresumeParams.


        :param dest_address: The dest_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._dest_address = dest_address

    @property
    def hop_stats_count(self):
        """Gets the hop_stats_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The hop_stats_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._hop_stats_count

    @hop_stats_count.setter
    def hop_stats_count(self, hop_stats_count):
        """Sets the hop_stats_count of this V1diagnosticpingpauseresumeParams.


        :param hop_stats_count: The hop_stats_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._hop_stats_count = hop_stats_count

    @property
    def interface(self):
        """Gets the interface of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The interface of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this V1diagnosticpingpauseresumeParams.


        :param interface: The interface of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def payload_size(self):
        """Gets the payload_size of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The payload_size of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._payload_size

    @payload_size.setter
    def payload_size(self, payload_size):
        """Sets the payload_size of this V1diagnosticpingpauseresumeParams.


        :param payload_size: The payload_size of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._payload_size = payload_size

    @property
    def port(self):
        """Gets the port of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The port of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V1diagnosticpingpauseresumeParams.


        :param port: The port of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def probe_count(self):
        """Gets the probe_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The probe_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._probe_count

    @probe_count.setter
    def probe_count(self, probe_count):
        """Sets the probe_count of this V1diagnosticpingpauseresumeParams.


        :param probe_count: The probe_count of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._probe_count = probe_count

    @property
    def src_address(self):
        """Gets the src_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The src_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._src_address

    @src_address.setter
    def src_address(self, src_address):
        """Sets the src_address of this V1diagnosticpingpauseresumeParams.


        :param src_address: The src_address of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._src_address = src_address

    @property
    def tos(self):
        """Gets the tos of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The tos of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._tos

    @tos.setter
    def tos(self, tos):
        """Sets the tos of this V1diagnosticpingpauseresumeParams.


        :param tos: The tos of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._tos = tos

    @property
    def vrf_name(self):
        """Gets the vrf_name of this V1diagnosticpingpauseresumeParams.  # noqa: E501


        :return: The vrf_name of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :rtype: str
        """
        return self._vrf_name

    @vrf_name.setter
    def vrf_name(self, vrf_name):
        """Sets the vrf_name of this V1diagnosticpingpauseresumeParams.


        :param vrf_name: The vrf_name of this V1diagnosticpingpauseresumeParams.  # noqa: E501
        :type: str
        """

        self._vrf_name = vrf_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1diagnosticpingpauseresumeParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1diagnosticpingpauseresumeParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
