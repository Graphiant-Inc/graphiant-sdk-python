# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200155IpsecTunnelConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bgp_graphiant_asn': 'str',
        'bgp_local_asn': 'str',
        'bgp_neighbor_hold_time': 'str',
        'bgp_neighbor_ipv4': 'str',
        'bgp_neighbor_ipv6': 'str',
        'dpd_interval': 'str',
        'dpd_retries': 'str',
        'graphiant_destination_ip': 'str',
        'graphiant_ike_id': 'str',
        'graphiant_outer_tunnel_ip': 'str',
        'graphiant_tunnel_ip': 'str',
        'graphiant_tunnel_ipv6': 'str',
        'ike_authentication_algorithm': 'str',
        'ike_authentication_method': 'str',
        'ike_dh_algorithm': 'str',
        'ike_encryption_algorithm': 'str',
        'ike_lifetime': 'str',
        'ike_preshared_key': 'str',
        'ike_version': 'str',
        'ipsec_authentication_algorithm': 'str',
        'ipsec_encryption_algorithm': 'str',
        'ipsec_extended_sequence_number': 'str',
        'ipsec_lifetime': 'str',
        'ipsec_mode': 'str',
        'ipsec_pfs_algorithm': 'str',
        'ipsec_protocol': 'str',
        'local_ike_id': 'str',
        'local_outer_tunnel_ip': 'str',
        'local_tunnel_ip': 'str',
        'local_tunnel_ipv6': 'str',
        'tcp_mss': 'str',
        'tunnel_mtu': 'str'
    }

    attribute_map = {
        'bgp_graphiant_asn': 'bgpGraphiantAsn',
        'bgp_local_asn': 'bgpLocalAsn',
        'bgp_neighbor_hold_time': 'bgpNeighborHoldTime',
        'bgp_neighbor_ipv4': 'bgpNeighborIpv4',
        'bgp_neighbor_ipv6': 'bgpNeighborIpv6',
        'dpd_interval': 'dpdInterval',
        'dpd_retries': 'dpdRetries',
        'graphiant_destination_ip': 'graphiantDestinationIp',
        'graphiant_ike_id': 'graphiantIkeId',
        'graphiant_outer_tunnel_ip': 'graphiantOuterTunnelIp',
        'graphiant_tunnel_ip': 'graphiantTunnelIp',
        'graphiant_tunnel_ipv6': 'graphiantTunnelIpv6',
        'ike_authentication_algorithm': 'ikeAuthenticationAlgorithm',
        'ike_authentication_method': 'ikeAuthenticationMethod',
        'ike_dh_algorithm': 'ikeDhAlgorithm',
        'ike_encryption_algorithm': 'ikeEncryptionAlgorithm',
        'ike_lifetime': 'ikeLifetime',
        'ike_preshared_key': 'ikePresharedKey',
        'ike_version': 'ikeVersion',
        'ipsec_authentication_algorithm': 'ipsecAuthenticationAlgorithm',
        'ipsec_encryption_algorithm': 'ipsecEncryptionAlgorithm',
        'ipsec_extended_sequence_number': 'ipsecExtendedSequenceNumber',
        'ipsec_lifetime': 'ipsecLifetime',
        'ipsec_mode': 'ipsecMode',
        'ipsec_pfs_algorithm': 'ipsecPfsAlgorithm',
        'ipsec_protocol': 'ipsecProtocol',
        'local_ike_id': 'localIkeId',
        'local_outer_tunnel_ip': 'localOuterTunnelIp',
        'local_tunnel_ip': 'localTunnelIp',
        'local_tunnel_ipv6': 'localTunnelIpv6',
        'tcp_mss': 'tcpMss',
        'tunnel_mtu': 'tunnelMtu'
    }

    def __init__(self, bgp_graphiant_asn=None, bgp_local_asn=None, bgp_neighbor_hold_time=None, bgp_neighbor_ipv4=None, bgp_neighbor_ipv6=None, dpd_interval=None, dpd_retries=None, graphiant_destination_ip=None, graphiant_ike_id=None, graphiant_outer_tunnel_ip=None, graphiant_tunnel_ip=None, graphiant_tunnel_ipv6=None, ike_authentication_algorithm=None, ike_authentication_method=None, ike_dh_algorithm=None, ike_encryption_algorithm=None, ike_lifetime=None, ike_preshared_key=None, ike_version=None, ipsec_authentication_algorithm=None, ipsec_encryption_algorithm=None, ipsec_extended_sequence_number=None, ipsec_lifetime=None, ipsec_mode=None, ipsec_pfs_algorithm=None, ipsec_protocol=None, local_ike_id=None, local_outer_tunnel_ip=None, local_tunnel_ip=None, local_tunnel_ipv6=None, tcp_mss=None, tunnel_mtu=None):  # noqa: E501
        """InlineResponse200155IpsecTunnelConfig - a model defined in Swagger"""  # noqa: E501
        self._bgp_graphiant_asn = None
        self._bgp_local_asn = None
        self._bgp_neighbor_hold_time = None
        self._bgp_neighbor_ipv4 = None
        self._bgp_neighbor_ipv6 = None
        self._dpd_interval = None
        self._dpd_retries = None
        self._graphiant_destination_ip = None
        self._graphiant_ike_id = None
        self._graphiant_outer_tunnel_ip = None
        self._graphiant_tunnel_ip = None
        self._graphiant_tunnel_ipv6 = None
        self._ike_authentication_algorithm = None
        self._ike_authentication_method = None
        self._ike_dh_algorithm = None
        self._ike_encryption_algorithm = None
        self._ike_lifetime = None
        self._ike_preshared_key = None
        self._ike_version = None
        self._ipsec_authentication_algorithm = None
        self._ipsec_encryption_algorithm = None
        self._ipsec_extended_sequence_number = None
        self._ipsec_lifetime = None
        self._ipsec_mode = None
        self._ipsec_pfs_algorithm = None
        self._ipsec_protocol = None
        self._local_ike_id = None
        self._local_outer_tunnel_ip = None
        self._local_tunnel_ip = None
        self._local_tunnel_ipv6 = None
        self._tcp_mss = None
        self._tunnel_mtu = None
        self.discriminator = None
        if bgp_graphiant_asn is not None:
            self.bgp_graphiant_asn = bgp_graphiant_asn
        if bgp_local_asn is not None:
            self.bgp_local_asn = bgp_local_asn
        if bgp_neighbor_hold_time is not None:
            self.bgp_neighbor_hold_time = bgp_neighbor_hold_time
        if bgp_neighbor_ipv4 is not None:
            self.bgp_neighbor_ipv4 = bgp_neighbor_ipv4
        if bgp_neighbor_ipv6 is not None:
            self.bgp_neighbor_ipv6 = bgp_neighbor_ipv6
        if dpd_interval is not None:
            self.dpd_interval = dpd_interval
        if dpd_retries is not None:
            self.dpd_retries = dpd_retries
        if graphiant_destination_ip is not None:
            self.graphiant_destination_ip = graphiant_destination_ip
        if graphiant_ike_id is not None:
            self.graphiant_ike_id = graphiant_ike_id
        if graphiant_outer_tunnel_ip is not None:
            self.graphiant_outer_tunnel_ip = graphiant_outer_tunnel_ip
        if graphiant_tunnel_ip is not None:
            self.graphiant_tunnel_ip = graphiant_tunnel_ip
        if graphiant_tunnel_ipv6 is not None:
            self.graphiant_tunnel_ipv6 = graphiant_tunnel_ipv6
        if ike_authentication_algorithm is not None:
            self.ike_authentication_algorithm = ike_authentication_algorithm
        if ike_authentication_method is not None:
            self.ike_authentication_method = ike_authentication_method
        if ike_dh_algorithm is not None:
            self.ike_dh_algorithm = ike_dh_algorithm
        if ike_encryption_algorithm is not None:
            self.ike_encryption_algorithm = ike_encryption_algorithm
        if ike_lifetime is not None:
            self.ike_lifetime = ike_lifetime
        if ike_preshared_key is not None:
            self.ike_preshared_key = ike_preshared_key
        if ike_version is not None:
            self.ike_version = ike_version
        if ipsec_authentication_algorithm is not None:
            self.ipsec_authentication_algorithm = ipsec_authentication_algorithm
        if ipsec_encryption_algorithm is not None:
            self.ipsec_encryption_algorithm = ipsec_encryption_algorithm
        if ipsec_extended_sequence_number is not None:
            self.ipsec_extended_sequence_number = ipsec_extended_sequence_number
        if ipsec_lifetime is not None:
            self.ipsec_lifetime = ipsec_lifetime
        if ipsec_mode is not None:
            self.ipsec_mode = ipsec_mode
        if ipsec_pfs_algorithm is not None:
            self.ipsec_pfs_algorithm = ipsec_pfs_algorithm
        if ipsec_protocol is not None:
            self.ipsec_protocol = ipsec_protocol
        if local_ike_id is not None:
            self.local_ike_id = local_ike_id
        if local_outer_tunnel_ip is not None:
            self.local_outer_tunnel_ip = local_outer_tunnel_ip
        if local_tunnel_ip is not None:
            self.local_tunnel_ip = local_tunnel_ip
        if local_tunnel_ipv6 is not None:
            self.local_tunnel_ipv6 = local_tunnel_ipv6
        if tcp_mss is not None:
            self.tcp_mss = tcp_mss
        if tunnel_mtu is not None:
            self.tunnel_mtu = tunnel_mtu

    @property
    def bgp_graphiant_asn(self):
        """Gets the bgp_graphiant_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The bgp_graphiant_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._bgp_graphiant_asn

    @bgp_graphiant_asn.setter
    def bgp_graphiant_asn(self, bgp_graphiant_asn):
        """Sets the bgp_graphiant_asn of this InlineResponse200155IpsecTunnelConfig.


        :param bgp_graphiant_asn: The bgp_graphiant_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._bgp_graphiant_asn = bgp_graphiant_asn

    @property
    def bgp_local_asn(self):
        """Gets the bgp_local_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The bgp_local_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._bgp_local_asn

    @bgp_local_asn.setter
    def bgp_local_asn(self, bgp_local_asn):
        """Sets the bgp_local_asn of this InlineResponse200155IpsecTunnelConfig.


        :param bgp_local_asn: The bgp_local_asn of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._bgp_local_asn = bgp_local_asn

    @property
    def bgp_neighbor_hold_time(self):
        """Gets the bgp_neighbor_hold_time of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The bgp_neighbor_hold_time of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._bgp_neighbor_hold_time

    @bgp_neighbor_hold_time.setter
    def bgp_neighbor_hold_time(self, bgp_neighbor_hold_time):
        """Sets the bgp_neighbor_hold_time of this InlineResponse200155IpsecTunnelConfig.


        :param bgp_neighbor_hold_time: The bgp_neighbor_hold_time of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._bgp_neighbor_hold_time = bgp_neighbor_hold_time

    @property
    def bgp_neighbor_ipv4(self):
        """Gets the bgp_neighbor_ipv4 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The bgp_neighbor_ipv4 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._bgp_neighbor_ipv4

    @bgp_neighbor_ipv4.setter
    def bgp_neighbor_ipv4(self, bgp_neighbor_ipv4):
        """Sets the bgp_neighbor_ipv4 of this InlineResponse200155IpsecTunnelConfig.


        :param bgp_neighbor_ipv4: The bgp_neighbor_ipv4 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._bgp_neighbor_ipv4 = bgp_neighbor_ipv4

    @property
    def bgp_neighbor_ipv6(self):
        """Gets the bgp_neighbor_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The bgp_neighbor_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._bgp_neighbor_ipv6

    @bgp_neighbor_ipv6.setter
    def bgp_neighbor_ipv6(self, bgp_neighbor_ipv6):
        """Sets the bgp_neighbor_ipv6 of this InlineResponse200155IpsecTunnelConfig.


        :param bgp_neighbor_ipv6: The bgp_neighbor_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._bgp_neighbor_ipv6 = bgp_neighbor_ipv6

    @property
    def dpd_interval(self):
        """Gets the dpd_interval of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The dpd_interval of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._dpd_interval

    @dpd_interval.setter
    def dpd_interval(self, dpd_interval):
        """Sets the dpd_interval of this InlineResponse200155IpsecTunnelConfig.


        :param dpd_interval: The dpd_interval of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._dpd_interval = dpd_interval

    @property
    def dpd_retries(self):
        """Gets the dpd_retries of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The dpd_retries of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._dpd_retries

    @dpd_retries.setter
    def dpd_retries(self, dpd_retries):
        """Sets the dpd_retries of this InlineResponse200155IpsecTunnelConfig.


        :param dpd_retries: The dpd_retries of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._dpd_retries = dpd_retries

    @property
    def graphiant_destination_ip(self):
        """Gets the graphiant_destination_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The graphiant_destination_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_destination_ip

    @graphiant_destination_ip.setter
    def graphiant_destination_ip(self, graphiant_destination_ip):
        """Sets the graphiant_destination_ip of this InlineResponse200155IpsecTunnelConfig.


        :param graphiant_destination_ip: The graphiant_destination_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._graphiant_destination_ip = graphiant_destination_ip

    @property
    def graphiant_ike_id(self):
        """Gets the graphiant_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The graphiant_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_ike_id

    @graphiant_ike_id.setter
    def graphiant_ike_id(self, graphiant_ike_id):
        """Sets the graphiant_ike_id of this InlineResponse200155IpsecTunnelConfig.


        :param graphiant_ike_id: The graphiant_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._graphiant_ike_id = graphiant_ike_id

    @property
    def graphiant_outer_tunnel_ip(self):
        """Gets the graphiant_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The graphiant_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_outer_tunnel_ip

    @graphiant_outer_tunnel_ip.setter
    def graphiant_outer_tunnel_ip(self, graphiant_outer_tunnel_ip):
        """Sets the graphiant_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.


        :param graphiant_outer_tunnel_ip: The graphiant_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._graphiant_outer_tunnel_ip = graphiant_outer_tunnel_ip

    @property
    def graphiant_tunnel_ip(self):
        """Gets the graphiant_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The graphiant_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_tunnel_ip

    @graphiant_tunnel_ip.setter
    def graphiant_tunnel_ip(self, graphiant_tunnel_ip):
        """Sets the graphiant_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.


        :param graphiant_tunnel_ip: The graphiant_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._graphiant_tunnel_ip = graphiant_tunnel_ip

    @property
    def graphiant_tunnel_ipv6(self):
        """Gets the graphiant_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The graphiant_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._graphiant_tunnel_ipv6

    @graphiant_tunnel_ipv6.setter
    def graphiant_tunnel_ipv6(self, graphiant_tunnel_ipv6):
        """Sets the graphiant_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.


        :param graphiant_tunnel_ipv6: The graphiant_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._graphiant_tunnel_ipv6 = graphiant_tunnel_ipv6

    @property
    def ike_authentication_algorithm(self):
        """Gets the ike_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_authentication_algorithm

    @ike_authentication_algorithm.setter
    def ike_authentication_algorithm(self, ike_authentication_algorithm):
        """Sets the ike_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ike_authentication_algorithm: The ike_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_authentication_algorithm = ike_authentication_algorithm

    @property
    def ike_authentication_method(self):
        """Gets the ike_authentication_method of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_authentication_method of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_authentication_method

    @ike_authentication_method.setter
    def ike_authentication_method(self, ike_authentication_method):
        """Sets the ike_authentication_method of this InlineResponse200155IpsecTunnelConfig.


        :param ike_authentication_method: The ike_authentication_method of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_authentication_method = ike_authentication_method

    @property
    def ike_dh_algorithm(self):
        """Gets the ike_dh_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_dh_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_dh_algorithm

    @ike_dh_algorithm.setter
    def ike_dh_algorithm(self, ike_dh_algorithm):
        """Sets the ike_dh_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ike_dh_algorithm: The ike_dh_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_dh_algorithm = ike_dh_algorithm

    @property
    def ike_encryption_algorithm(self):
        """Gets the ike_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_encryption_algorithm

    @ike_encryption_algorithm.setter
    def ike_encryption_algorithm(self, ike_encryption_algorithm):
        """Sets the ike_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ike_encryption_algorithm: The ike_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_encryption_algorithm = ike_encryption_algorithm

    @property
    def ike_lifetime(self):
        """Gets the ike_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_lifetime

    @ike_lifetime.setter
    def ike_lifetime(self, ike_lifetime):
        """Sets the ike_lifetime of this InlineResponse200155IpsecTunnelConfig.


        :param ike_lifetime: The ike_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_lifetime = ike_lifetime

    @property
    def ike_preshared_key(self):
        """Gets the ike_preshared_key of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_preshared_key of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_preshared_key

    @ike_preshared_key.setter
    def ike_preshared_key(self, ike_preshared_key):
        """Sets the ike_preshared_key of this InlineResponse200155IpsecTunnelConfig.


        :param ike_preshared_key: The ike_preshared_key of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_preshared_key = ike_preshared_key

    @property
    def ike_version(self):
        """Gets the ike_version of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ike_version of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ike_version

    @ike_version.setter
    def ike_version(self, ike_version):
        """Sets the ike_version of this InlineResponse200155IpsecTunnelConfig.


        :param ike_version: The ike_version of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ike_version = ike_version

    @property
    def ipsec_authentication_algorithm(self):
        """Gets the ipsec_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_authentication_algorithm

    @ipsec_authentication_algorithm.setter
    def ipsec_authentication_algorithm(self, ipsec_authentication_algorithm):
        """Sets the ipsec_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_authentication_algorithm: The ipsec_authentication_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_authentication_algorithm = ipsec_authentication_algorithm

    @property
    def ipsec_encryption_algorithm(self):
        """Gets the ipsec_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_encryption_algorithm

    @ipsec_encryption_algorithm.setter
    def ipsec_encryption_algorithm(self, ipsec_encryption_algorithm):
        """Sets the ipsec_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_encryption_algorithm: The ipsec_encryption_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_encryption_algorithm = ipsec_encryption_algorithm

    @property
    def ipsec_extended_sequence_number(self):
        """Gets the ipsec_extended_sequence_number of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_extended_sequence_number of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_extended_sequence_number

    @ipsec_extended_sequence_number.setter
    def ipsec_extended_sequence_number(self, ipsec_extended_sequence_number):
        """Sets the ipsec_extended_sequence_number of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_extended_sequence_number: The ipsec_extended_sequence_number of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_extended_sequence_number = ipsec_extended_sequence_number

    @property
    def ipsec_lifetime(self):
        """Gets the ipsec_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_lifetime

    @ipsec_lifetime.setter
    def ipsec_lifetime(self, ipsec_lifetime):
        """Sets the ipsec_lifetime of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_lifetime: The ipsec_lifetime of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_lifetime = ipsec_lifetime

    @property
    def ipsec_mode(self):
        """Gets the ipsec_mode of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_mode of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_mode

    @ipsec_mode.setter
    def ipsec_mode(self, ipsec_mode):
        """Sets the ipsec_mode of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_mode: The ipsec_mode of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_mode = ipsec_mode

    @property
    def ipsec_pfs_algorithm(self):
        """Gets the ipsec_pfs_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_pfs_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_pfs_algorithm

    @ipsec_pfs_algorithm.setter
    def ipsec_pfs_algorithm(self, ipsec_pfs_algorithm):
        """Sets the ipsec_pfs_algorithm of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_pfs_algorithm: The ipsec_pfs_algorithm of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_pfs_algorithm = ipsec_pfs_algorithm

    @property
    def ipsec_protocol(self):
        """Gets the ipsec_protocol of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The ipsec_protocol of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_protocol

    @ipsec_protocol.setter
    def ipsec_protocol(self, ipsec_protocol):
        """Sets the ipsec_protocol of this InlineResponse200155IpsecTunnelConfig.


        :param ipsec_protocol: The ipsec_protocol of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._ipsec_protocol = ipsec_protocol

    @property
    def local_ike_id(self):
        """Gets the local_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The local_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_ike_id

    @local_ike_id.setter
    def local_ike_id(self, local_ike_id):
        """Sets the local_ike_id of this InlineResponse200155IpsecTunnelConfig.


        :param local_ike_id: The local_ike_id of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._local_ike_id = local_ike_id

    @property
    def local_outer_tunnel_ip(self):
        """Gets the local_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The local_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_outer_tunnel_ip

    @local_outer_tunnel_ip.setter
    def local_outer_tunnel_ip(self, local_outer_tunnel_ip):
        """Sets the local_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.


        :param local_outer_tunnel_ip: The local_outer_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._local_outer_tunnel_ip = local_outer_tunnel_ip

    @property
    def local_tunnel_ip(self):
        """Gets the local_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The local_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_tunnel_ip

    @local_tunnel_ip.setter
    def local_tunnel_ip(self, local_tunnel_ip):
        """Sets the local_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.


        :param local_tunnel_ip: The local_tunnel_ip of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._local_tunnel_ip = local_tunnel_ip

    @property
    def local_tunnel_ipv6(self):
        """Gets the local_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The local_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._local_tunnel_ipv6

    @local_tunnel_ipv6.setter
    def local_tunnel_ipv6(self, local_tunnel_ipv6):
        """Sets the local_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.


        :param local_tunnel_ipv6: The local_tunnel_ipv6 of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._local_tunnel_ipv6 = local_tunnel_ipv6

    @property
    def tcp_mss(self):
        """Gets the tcp_mss of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The tcp_mss of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._tcp_mss

    @tcp_mss.setter
    def tcp_mss(self, tcp_mss):
        """Sets the tcp_mss of this InlineResponse200155IpsecTunnelConfig.


        :param tcp_mss: The tcp_mss of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._tcp_mss = tcp_mss

    @property
    def tunnel_mtu(self):
        """Gets the tunnel_mtu of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501


        :return: The tunnel_mtu of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_mtu

    @tunnel_mtu.setter
    def tunnel_mtu(self, tunnel_mtu):
        """Sets the tunnel_mtu of this InlineResponse200155IpsecTunnelConfig.


        :param tunnel_mtu: The tunnel_mtu of this InlineResponse200155IpsecTunnelConfig.  # noqa: E501
        :type: str
        """

        self._tunnel_mtu = tunnel_mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200155IpsecTunnelConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200155IpsecTunnelConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
