# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200196Path(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_path': 'list[str]',
        'community': 'list[InlineResponse200196Community]',
        'contributing_src': 'InlineResponse200196ContributingSrc',
        'egress_interface': 'str',
        'ext_community': 'list[InlineResponse200196Community]',
        'is_stale': 'str',
        'last_modified': 'V1devicesbringuptokenValidTillTs',
        'local_pref': 'str',
        'local_preference': 'str',
        'med': 'str',
        'mpls_label_stack': 'list[str]',
        'next_hop': 'str',
        'node_interface': 'str',
        'node_sid_label': 'str',
        'node_type': 'str',
        'odp_nexthop': 'list[str]',
        'origin': 'str',
        'originator_id': 'str',
        'path_status': 'str',
        'path_type': 'str',
        'weight': 'str'
    }

    attribute_map = {
        'as_path': 'asPath',
        'community': 'community',
        'contributing_src': 'contributingSrc',
        'egress_interface': 'egressInterface',
        'ext_community': 'extCommunity',
        'is_stale': 'isStale',
        'last_modified': 'lastModified',
        'local_pref': 'localPref',
        'local_preference': 'localPreference',
        'med': 'med',
        'mpls_label_stack': 'mplsLabelStack',
        'next_hop': 'nextHop',
        'node_interface': 'nodeInterface',
        'node_sid_label': 'nodeSidLabel',
        'node_type': 'nodeType',
        'odp_nexthop': 'odpNexthop',
        'origin': 'origin',
        'originator_id': 'originatorId',
        'path_status': 'pathStatus',
        'path_type': 'pathType',
        'weight': 'weight'
    }

    def __init__(self, as_path=None, community=None, contributing_src=None, egress_interface=None, ext_community=None, is_stale=None, last_modified=None, local_pref=None, local_preference=None, med=None, mpls_label_stack=None, next_hop=None, node_interface=None, node_sid_label=None, node_type=None, odp_nexthop=None, origin=None, originator_id=None, path_status=None, path_type=None, weight=None):  # noqa: E501
        """InlineResponse200196Path - a model defined in Swagger"""  # noqa: E501
        self._as_path = None
        self._community = None
        self._contributing_src = None
        self._egress_interface = None
        self._ext_community = None
        self._is_stale = None
        self._last_modified = None
        self._local_pref = None
        self._local_preference = None
        self._med = None
        self._mpls_label_stack = None
        self._next_hop = None
        self._node_interface = None
        self._node_sid_label = None
        self._node_type = None
        self._odp_nexthop = None
        self._origin = None
        self._originator_id = None
        self._path_status = None
        self._path_type = None
        self._weight = None
        self.discriminator = None
        if as_path is not None:
            self.as_path = as_path
        if community is not None:
            self.community = community
        if contributing_src is not None:
            self.contributing_src = contributing_src
        if egress_interface is not None:
            self.egress_interface = egress_interface
        if ext_community is not None:
            self.ext_community = ext_community
        if is_stale is not None:
            self.is_stale = is_stale
        if last_modified is not None:
            self.last_modified = last_modified
        if local_pref is not None:
            self.local_pref = local_pref
        if local_preference is not None:
            self.local_preference = local_preference
        if med is not None:
            self.med = med
        if mpls_label_stack is not None:
            self.mpls_label_stack = mpls_label_stack
        if next_hop is not None:
            self.next_hop = next_hop
        if node_interface is not None:
            self.node_interface = node_interface
        if node_sid_label is not None:
            self.node_sid_label = node_sid_label
        if node_type is not None:
            self.node_type = node_type
        if odp_nexthop is not None:
            self.odp_nexthop = odp_nexthop
        if origin is not None:
            self.origin = origin
        if originator_id is not None:
            self.originator_id = originator_id
        if path_status is not None:
            self.path_status = path_status
        if path_type is not None:
            self.path_type = path_type
        if weight is not None:
            self.weight = weight

    @property
    def as_path(self):
        """Gets the as_path of this InlineResponse200196Path.  # noqa: E501


        :return: The as_path of this InlineResponse200196Path.  # noqa: E501
        :rtype: list[str]
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """Sets the as_path of this InlineResponse200196Path.


        :param as_path: The as_path of this InlineResponse200196Path.  # noqa: E501
        :type: list[str]
        """

        self._as_path = as_path

    @property
    def community(self):
        """Gets the community of this InlineResponse200196Path.  # noqa: E501


        :return: The community of this InlineResponse200196Path.  # noqa: E501
        :rtype: list[InlineResponse200196Community]
        """
        return self._community

    @community.setter
    def community(self, community):
        """Sets the community of this InlineResponse200196Path.


        :param community: The community of this InlineResponse200196Path.  # noqa: E501
        :type: list[InlineResponse200196Community]
        """

        self._community = community

    @property
    def contributing_src(self):
        """Gets the contributing_src of this InlineResponse200196Path.  # noqa: E501


        :return: The contributing_src of this InlineResponse200196Path.  # noqa: E501
        :rtype: InlineResponse200196ContributingSrc
        """
        return self._contributing_src

    @contributing_src.setter
    def contributing_src(self, contributing_src):
        """Sets the contributing_src of this InlineResponse200196Path.


        :param contributing_src: The contributing_src of this InlineResponse200196Path.  # noqa: E501
        :type: InlineResponse200196ContributingSrc
        """

        self._contributing_src = contributing_src

    @property
    def egress_interface(self):
        """Gets the egress_interface of this InlineResponse200196Path.  # noqa: E501


        :return: The egress_interface of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._egress_interface

    @egress_interface.setter
    def egress_interface(self, egress_interface):
        """Sets the egress_interface of this InlineResponse200196Path.


        :param egress_interface: The egress_interface of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._egress_interface = egress_interface

    @property
    def ext_community(self):
        """Gets the ext_community of this InlineResponse200196Path.  # noqa: E501


        :return: The ext_community of this InlineResponse200196Path.  # noqa: E501
        :rtype: list[InlineResponse200196Community]
        """
        return self._ext_community

    @ext_community.setter
    def ext_community(self, ext_community):
        """Sets the ext_community of this InlineResponse200196Path.


        :param ext_community: The ext_community of this InlineResponse200196Path.  # noqa: E501
        :type: list[InlineResponse200196Community]
        """

        self._ext_community = ext_community

    @property
    def is_stale(self):
        """Gets the is_stale of this InlineResponse200196Path.  # noqa: E501


        :return: The is_stale of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._is_stale

    @is_stale.setter
    def is_stale(self, is_stale):
        """Sets the is_stale of this InlineResponse200196Path.


        :param is_stale: The is_stale of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._is_stale = is_stale

    @property
    def last_modified(self):
        """Gets the last_modified of this InlineResponse200196Path.  # noqa: E501


        :return: The last_modified of this InlineResponse200196Path.  # noqa: E501
        :rtype: V1devicesbringuptokenValidTillTs
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this InlineResponse200196Path.


        :param last_modified: The last_modified of this InlineResponse200196Path.  # noqa: E501
        :type: V1devicesbringuptokenValidTillTs
        """

        self._last_modified = last_modified

    @property
    def local_pref(self):
        """Gets the local_pref of this InlineResponse200196Path.  # noqa: E501


        :return: The local_pref of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._local_pref

    @local_pref.setter
    def local_pref(self, local_pref):
        """Sets the local_pref of this InlineResponse200196Path.


        :param local_pref: The local_pref of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._local_pref = local_pref

    @property
    def local_preference(self):
        """Gets the local_preference of this InlineResponse200196Path.  # noqa: E501


        :return: The local_preference of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._local_preference

    @local_preference.setter
    def local_preference(self, local_preference):
        """Sets the local_preference of this InlineResponse200196Path.


        :param local_preference: The local_preference of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._local_preference = local_preference

    @property
    def med(self):
        """Gets the med of this InlineResponse200196Path.  # noqa: E501


        :return: The med of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._med

    @med.setter
    def med(self, med):
        """Sets the med of this InlineResponse200196Path.


        :param med: The med of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._med = med

    @property
    def mpls_label_stack(self):
        """Gets the mpls_label_stack of this InlineResponse200196Path.  # noqa: E501


        :return: The mpls_label_stack of this InlineResponse200196Path.  # noqa: E501
        :rtype: list[str]
        """
        return self._mpls_label_stack

    @mpls_label_stack.setter
    def mpls_label_stack(self, mpls_label_stack):
        """Sets the mpls_label_stack of this InlineResponse200196Path.


        :param mpls_label_stack: The mpls_label_stack of this InlineResponse200196Path.  # noqa: E501
        :type: list[str]
        """

        self._mpls_label_stack = mpls_label_stack

    @property
    def next_hop(self):
        """Gets the next_hop of this InlineResponse200196Path.  # noqa: E501


        :return: The next_hop of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this InlineResponse200196Path.


        :param next_hop: The next_hop of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def node_interface(self):
        """Gets the node_interface of this InlineResponse200196Path.  # noqa: E501


        :return: The node_interface of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._node_interface

    @node_interface.setter
    def node_interface(self, node_interface):
        """Sets the node_interface of this InlineResponse200196Path.


        :param node_interface: The node_interface of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._node_interface = node_interface

    @property
    def node_sid_label(self):
        """Gets the node_sid_label of this InlineResponse200196Path.  # noqa: E501


        :return: The node_sid_label of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._node_sid_label

    @node_sid_label.setter
    def node_sid_label(self, node_sid_label):
        """Sets the node_sid_label of this InlineResponse200196Path.


        :param node_sid_label: The node_sid_label of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._node_sid_label = node_sid_label

    @property
    def node_type(self):
        """Gets the node_type of this InlineResponse200196Path.  # noqa: E501


        :return: The node_type of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this InlineResponse200196Path.


        :param node_type: The node_type of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._node_type = node_type

    @property
    def odp_nexthop(self):
        """Gets the odp_nexthop of this InlineResponse200196Path.  # noqa: E501


        :return: The odp_nexthop of this InlineResponse200196Path.  # noqa: E501
        :rtype: list[str]
        """
        return self._odp_nexthop

    @odp_nexthop.setter
    def odp_nexthop(self, odp_nexthop):
        """Sets the odp_nexthop of this InlineResponse200196Path.


        :param odp_nexthop: The odp_nexthop of this InlineResponse200196Path.  # noqa: E501
        :type: list[str]
        """

        self._odp_nexthop = odp_nexthop

    @property
    def origin(self):
        """Gets the origin of this InlineResponse200196Path.  # noqa: E501


        :return: The origin of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this InlineResponse200196Path.


        :param origin: The origin of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def originator_id(self):
        """Gets the originator_id of this InlineResponse200196Path.  # noqa: E501


        :return: The originator_id of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._originator_id

    @originator_id.setter
    def originator_id(self, originator_id):
        """Sets the originator_id of this InlineResponse200196Path.


        :param originator_id: The originator_id of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._originator_id = originator_id

    @property
    def path_status(self):
        """Gets the path_status of this InlineResponse200196Path.  # noqa: E501


        :return: The path_status of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._path_status

    @path_status.setter
    def path_status(self, path_status):
        """Sets the path_status of this InlineResponse200196Path.


        :param path_status: The path_status of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._path_status = path_status

    @property
    def path_type(self):
        """Gets the path_type of this InlineResponse200196Path.  # noqa: E501


        :return: The path_type of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._path_type

    @path_type.setter
    def path_type(self, path_type):
        """Sets the path_type of this InlineResponse200196Path.


        :param path_type: The path_type of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._path_type = path_type

    @property
    def weight(self):
        """Gets the weight of this InlineResponse200196Path.  # noqa: E501


        :return: The weight of this InlineResponse200196Path.  # noqa: E501
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this InlineResponse200196Path.


        :param weight: The weight of this InlineResponse200196Path.  # noqa: E501
        :type: str
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200196Path, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200196Path):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
