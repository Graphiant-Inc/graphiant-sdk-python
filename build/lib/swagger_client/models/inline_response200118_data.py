# coding: utf-8

"""
    Graphiant APIs

    **To use the APIs:**   1) Login using /api/v1/auth/login   2) Copy the value of \"token\" in the response   3) Click the \"Authorize\" button   4) In the \"Value\" text field enter: \"Bearer &lt;paste token from login api response&gt;\"   5) Click \"Authorize\"   6) If a valid token was entered, all requests are now authorized    **The token is valid for 2 hours, if it's expired (403 response from apis):**  1) Login again using the login api  2) Click \"Authorize\"  3) Click \"Logout\" and enter the new token just as before  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200118Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bfd_session_count': 'str',
        'bgp_neighbor_ip_list': 'list[str]',
        'bgp_session_count': 'str',
        'installed_labels': 'str',
        'ipsec_session_count': 'str',
        'ongoing_alerts': 'str',
        'ospf_neighbor_ip_list': 'list[str]',
        'ospf_session_count': 'str'
    }

    attribute_map = {
        'bfd_session_count': 'bfdSessionCount',
        'bgp_neighbor_ip_list': 'bgpNeighborIpList',
        'bgp_session_count': 'bgpSessionCount',
        'installed_labels': 'installedLabels',
        'ipsec_session_count': 'ipsecSessionCount',
        'ongoing_alerts': 'ongoingAlerts',
        'ospf_neighbor_ip_list': 'ospfNeighborIpList',
        'ospf_session_count': 'ospfSessionCount'
    }

    def __init__(self, bfd_session_count=None, bgp_neighbor_ip_list=None, bgp_session_count=None, installed_labels=None, ipsec_session_count=None, ongoing_alerts=None, ospf_neighbor_ip_list=None, ospf_session_count=None):  # noqa: E501
        """InlineResponse200118Data - a model defined in Swagger"""  # noqa: E501
        self._bfd_session_count = None
        self._bgp_neighbor_ip_list = None
        self._bgp_session_count = None
        self._installed_labels = None
        self._ipsec_session_count = None
        self._ongoing_alerts = None
        self._ospf_neighbor_ip_list = None
        self._ospf_session_count = None
        self.discriminator = None
        if bfd_session_count is not None:
            self.bfd_session_count = bfd_session_count
        if bgp_neighbor_ip_list is not None:
            self.bgp_neighbor_ip_list = bgp_neighbor_ip_list
        if bgp_session_count is not None:
            self.bgp_session_count = bgp_session_count
        if installed_labels is not None:
            self.installed_labels = installed_labels
        if ipsec_session_count is not None:
            self.ipsec_session_count = ipsec_session_count
        if ongoing_alerts is not None:
            self.ongoing_alerts = ongoing_alerts
        if ospf_neighbor_ip_list is not None:
            self.ospf_neighbor_ip_list = ospf_neighbor_ip_list
        if ospf_session_count is not None:
            self.ospf_session_count = ospf_session_count

    @property
    def bfd_session_count(self):
        """Gets the bfd_session_count of this InlineResponse200118Data.  # noqa: E501


        :return: The bfd_session_count of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._bfd_session_count

    @bfd_session_count.setter
    def bfd_session_count(self, bfd_session_count):
        """Sets the bfd_session_count of this InlineResponse200118Data.


        :param bfd_session_count: The bfd_session_count of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._bfd_session_count = bfd_session_count

    @property
    def bgp_neighbor_ip_list(self):
        """Gets the bgp_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501


        :return: The bgp_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._bgp_neighbor_ip_list

    @bgp_neighbor_ip_list.setter
    def bgp_neighbor_ip_list(self, bgp_neighbor_ip_list):
        """Sets the bgp_neighbor_ip_list of this InlineResponse200118Data.


        :param bgp_neighbor_ip_list: The bgp_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501
        :type: list[str]
        """

        self._bgp_neighbor_ip_list = bgp_neighbor_ip_list

    @property
    def bgp_session_count(self):
        """Gets the bgp_session_count of this InlineResponse200118Data.  # noqa: E501


        :return: The bgp_session_count of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._bgp_session_count

    @bgp_session_count.setter
    def bgp_session_count(self, bgp_session_count):
        """Sets the bgp_session_count of this InlineResponse200118Data.


        :param bgp_session_count: The bgp_session_count of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._bgp_session_count = bgp_session_count

    @property
    def installed_labels(self):
        """Gets the installed_labels of this InlineResponse200118Data.  # noqa: E501


        :return: The installed_labels of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._installed_labels

    @installed_labels.setter
    def installed_labels(self, installed_labels):
        """Sets the installed_labels of this InlineResponse200118Data.


        :param installed_labels: The installed_labels of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._installed_labels = installed_labels

    @property
    def ipsec_session_count(self):
        """Gets the ipsec_session_count of this InlineResponse200118Data.  # noqa: E501


        :return: The ipsec_session_count of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_session_count

    @ipsec_session_count.setter
    def ipsec_session_count(self, ipsec_session_count):
        """Sets the ipsec_session_count of this InlineResponse200118Data.


        :param ipsec_session_count: The ipsec_session_count of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._ipsec_session_count = ipsec_session_count

    @property
    def ongoing_alerts(self):
        """Gets the ongoing_alerts of this InlineResponse200118Data.  # noqa: E501


        :return: The ongoing_alerts of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._ongoing_alerts

    @ongoing_alerts.setter
    def ongoing_alerts(self, ongoing_alerts):
        """Sets the ongoing_alerts of this InlineResponse200118Data.


        :param ongoing_alerts: The ongoing_alerts of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._ongoing_alerts = ongoing_alerts

    @property
    def ospf_neighbor_ip_list(self):
        """Gets the ospf_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501


        :return: The ospf_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._ospf_neighbor_ip_list

    @ospf_neighbor_ip_list.setter
    def ospf_neighbor_ip_list(self, ospf_neighbor_ip_list):
        """Sets the ospf_neighbor_ip_list of this InlineResponse200118Data.


        :param ospf_neighbor_ip_list: The ospf_neighbor_ip_list of this InlineResponse200118Data.  # noqa: E501
        :type: list[str]
        """

        self._ospf_neighbor_ip_list = ospf_neighbor_ip_list

    @property
    def ospf_session_count(self):
        """Gets the ospf_session_count of this InlineResponse200118Data.  # noqa: E501


        :return: The ospf_session_count of this InlineResponse200118Data.  # noqa: E501
        :rtype: str
        """
        return self._ospf_session_count

    @ospf_session_count.setter
    def ospf_session_count(self, ospf_session_count):
        """Sets the ospf_session_count of this InlineResponse200118Data.


        :param ospf_session_count: The ospf_session_count of this InlineResponse200118Data.  # noqa: E501
        :type: str
        """

        self._ospf_session_count = ospf_session_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200118Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200118Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
